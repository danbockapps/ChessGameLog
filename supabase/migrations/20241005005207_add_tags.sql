create table "public"."game_tag" (
    "created_at" timestamp with time zone not null default now(),
    "game_id" bigint not null,
    "tag_id" bigint not null
);


alter table "public"."game_tag" enable row level security;

create table "public"."tags" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "description" text,
    "owner_id" uuid default auth.uid(),
    "public" boolean default false
);


alter table "public"."tags" enable row level security;

CREATE UNIQUE INDEX game_tag_pkey ON public.game_tag USING btree (game_id, tag_id);

CREATE UNIQUE INDEX tags_pkey ON public.tags USING btree (id);

alter table "public"."game_tag" add constraint "game_tag_pkey" PRIMARY KEY using index "game_tag_pkey";

alter table "public"."tags" add constraint "tags_pkey" PRIMARY KEY using index "tags_pkey";

alter table "public"."game_tag" add constraint "game_tag_game_id_fkey" FOREIGN KEY (game_id) REFERENCES games(id) not valid;

alter table "public"."game_tag" validate constraint "game_tag_game_id_fkey";

alter table "public"."game_tag" add constraint "game_tag_tag_id_fkey" FOREIGN KEY (tag_id) REFERENCES tags(id) not valid;

alter table "public"."game_tag" validate constraint "game_tag_tag_id_fkey";

alter table "public"."tags" add constraint "tags_owner_fkey" FOREIGN KEY (owner_id) REFERENCES auth.users(id) not valid;

alter table "public"."tags" validate constraint "tags_owner_fkey";

grant delete on table "public"."game_tag" to "anon";

grant insert on table "public"."game_tag" to "anon";

grant references on table "public"."game_tag" to "anon";

grant select on table "public"."game_tag" to "anon";

grant trigger on table "public"."game_tag" to "anon";

grant truncate on table "public"."game_tag" to "anon";

grant update on table "public"."game_tag" to "anon";

grant delete on table "public"."game_tag" to "authenticated";

grant insert on table "public"."game_tag" to "authenticated";

grant references on table "public"."game_tag" to "authenticated";

grant select on table "public"."game_tag" to "authenticated";

grant trigger on table "public"."game_tag" to "authenticated";

grant truncate on table "public"."game_tag" to "authenticated";

grant update on table "public"."game_tag" to "authenticated";

grant delete on table "public"."game_tag" to "service_role";

grant insert on table "public"."game_tag" to "service_role";

grant references on table "public"."game_tag" to "service_role";

grant select on table "public"."game_tag" to "service_role";

grant trigger on table "public"."game_tag" to "service_role";

grant truncate on table "public"."game_tag" to "service_role";

grant update on table "public"."game_tag" to "service_role";

grant delete on table "public"."tags" to "anon";

grant insert on table "public"."tags" to "anon";

grant references on table "public"."tags" to "anon";

grant select on table "public"."tags" to "anon";

grant trigger on table "public"."tags" to "anon";

grant truncate on table "public"."tags" to "anon";

grant update on table "public"."tags" to "anon";

grant delete on table "public"."tags" to "authenticated";

grant insert on table "public"."tags" to "authenticated";

grant references on table "public"."tags" to "authenticated";

grant select on table "public"."tags" to "authenticated";

grant trigger on table "public"."tags" to "authenticated";

grant truncate on table "public"."tags" to "authenticated";

grant update on table "public"."tags" to "authenticated";

grant delete on table "public"."tags" to "service_role";

grant insert on table "public"."tags" to "service_role";

grant references on table "public"."tags" to "service_role";

grant select on table "public"."tags" to "service_role";

grant trigger on table "public"."tags" to "service_role";

grant truncate on table "public"."tags" to "service_role";

grant update on table "public"."tags" to "service_role";

create policy "Enable delete for a user's games"
on "public"."game_tag"
as permissive
for delete
to public
using ((game_id IN ( SELECT games.id
   FROM games
  WHERE (games.collection_id IN ( SELECT collections.id
           FROM collections
          WHERE (collections.owner_id = ( SELECT auth.uid() AS uid)))))));


create policy "Enable insert for user's games"
on "public"."game_tag"
as permissive
for insert
to public
with check ((game_id IN ( SELECT games.id
   FROM games
  WHERE (games.collection_id IN ( SELECT collections.id
           FROM collections
          WHERE (collections.owner_id = ( SELECT auth.uid() AS uid)))))));


create policy "Enable read access for all users"
on "public"."game_tag"
as permissive
for select
to public
using (true);


create policy "Enable insert for users based on owner"
on "public"."tags"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = owner_id));


create policy "Enable read access for all users"
on "public"."tags"
as permissive
for select
to public
using (true);



